package com.book.config;import com.book.exception.CustomGenericException;import com.book.exception.UserNotFoundException;import com.fasterxml.jackson.databind.ObjectMapper;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.ResponseStatus;import java.io.IOException;@ControllerAdvicepublic class ExceptionHandlerConfig {    private final Logger logger = LoggerFactory.getLogger(ExceptionHandlerConfig.class);    @ResponseStatus(value = HttpStatus.NOT_FOUND)    @ResponseBody    @ExceptionHandler(value = UserNotFoundException.class)    public String handleServiceException(Exception ex) {        CustomGenericException customGenericException = new CustomGenericException(                ex.getClass().getSimpleName(), ex.getMessage());        try {            String msg = new ObjectMapper().writeValueAsString(customGenericException);            logger.info(ex.getMessage(), ex);            return msg;        } catch (IOException ignore) {            logger.error(ex.getMessage(), ex);            return new ResponseEntity<Object>(ignore.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR).toString();        }    }    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)    @ResponseBody    @ExceptionHandler(value = Throwable.class)    public String handleAllException(Exception ex) {        CustomGenericException customGenericException = new CustomGenericException(                ex.getClass().getSimpleName(), ex.getMessage());        try {            String msg = new ObjectMapper().writeValueAsString(customGenericException);            logger.error(ex.getMessage(), ex);            return msg;        } catch (IOException ignore) {            logger.error(ex.getMessage(), ex);            return new ResponseEntity<Object>(ignore.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR).toString();        }    }}