//package com.book.unit;////import com.book.dto.ApartmentDto;//import com.book.endpoint.PersonEndpoint;//import com.fasterxml.jackson.databind.ObjectMapper;//import org.junit.Before;//import org.junit.Test;//import org.mockito.InjectMocks;//import org.mockito.Mock;//import org.springframework.http.MediaType;//import org.springframework.test.web.servlet.MockMvc;//import org.springframework.test.web.servlet.MvcResult;////import static org.junit.Assert.assertEquals;//import static org.mockito.Matchers.any;//import static org.mockito.Mockito.doNothing;//import static org.mockito.Mockito.when;//import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;//import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;//import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;//import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;//import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;//import static org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup;////public class AgentControllerTest extends OlxParserTest {//    private static final String USER_URL = "/person/1";//    private static final String REMOVE_USER_URL = "/person/delete/1";//    private static final String UPDATE_USER_URL = "/person/add_or_update";//    private static final Long USER_ID = 1L;//    private MockMvc mockMvc;//    private ObjectMapper mapper;////    @InjectMocks//    private PersonEndpoint personEndpoint;//    @Mock//    private PersonService personService;////    @Before//    public void before() {//        this.mockMvc = standaloneSetup(personEndpoint).build();//        mapper = new ObjectMapper();//    }////    @Test//    public void getUser() throws Exception {//        ApartmentDto source = createPersonDto(NAME);//        when(personService.getPersonById(any())).thenReturn(source);////        MvcResult result = this.mockMvc.perform(get(USER_URL))//                .andExpect(status().isOk())//                .andDo(print())//                .andReturn();////        String content = result.getResponse().getContentAsString();//        ApartmentDto dto = mapper.readValue(content, ApartmentDto.class);//        assertEquals(source, dto);//    }////    @Test//    public void deleteUser() throws Exception {//        doNothing().when(personService).removePerson(USER_ID);////        this.mockMvc.perform(delete(REMOVE_USER_URL))//                .andExpect(status().isOk())//                .andDo(print())//                .andReturn();//    }////    @Test//    public void addOrUpdateUser() throws Exception {//        ApartmentDto source = createPersonDto(NAME);//        when(personService.savePerson(any())).thenReturn(source);////        MvcResult result = this.mockMvc.perform(post(UPDATE_USER_URL)//                .contentType(MediaType.APPLICATION_JSON)//                .content(mapper.writeValueAsString(source)))//                .andExpect(status().isOk())//                .andDo(print())//                .andReturn();////        String content = result.getResponse().getContentAsString();//        ApartmentDto dto = mapper.readValue(content, ApartmentDto.class);//        assertEquals(source, dto);//    }//}